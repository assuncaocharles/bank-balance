{"version":3,"sources":["services/DataApi.tsx","utils/utils.tsx","components/dashboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["API_URL","_callee","id","value","resp","regenerator_default","a","wrap","_context","prev","next","axios","post","concat","sent","abrupt","data","stop","Operations","ApiService","executeTransaction","getBalance","get","getHistory","getTagColor","operation","Deposit","Withdraw","Declined","Title","Typography","Text","Dashboard","_ref","accountId","_useState","useState","_useState2","Object","slicedToArray","setValue","_useState3","_useState4","balance","setBalance","_useState5","_useState6","message","setMessage","_useState7","_useState8","history","setHistory","_handleClick","asyncToGenerator","mark","_callee2","_ref5","account","_context2","apply","this","arguments","useAsyncEffect","_ref3","_ref3$data","_ref4","react_default","createElement","style","display","height","gridTemplateColumns","width","borderRight","padding","level","code","statistic","title","prefix","toLocaleString","minimumFractionDigits","length","list","size","bordered","dataSource","renderItem","item","Item","tag","color","margin","number_format_default","displayType","thousandSeparator","decimalSeparator","decimalScale","fixedDecimalScale","allowNegative","date_picker","showTime","format","defaultValue","moment","date","disabled","borderLeft","customInput","Input","onValueChange","newVal","parseFloat","paddingTop","es_button","type","onClick","App","setAccountId","inputVal","setInputVal","dashboard_Dashboard","modal","visible","onOk","onCancel","input","icon","placeholder","onChange","event","target","test","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.857cd2c8.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:3000';\nasync function executeTransaction(id: string, value: number) {\n  const resp = await axios.post(`${API_URL}/transaction`, { id, value });\n  return resp.data;\n}\n\nfunction getBalance(id: string) {\n  return axios.get(`${API_URL}/balance/${id}`);\n}\n\nfunction getHistory(id: string) {\n  return axios.get(`${API_URL}/history/${id}`);\n}\n\nexport const ApiService = {\n  executeTransaction,\n  getBalance,\n  getHistory,\n};\n","enum Operations {\n  Deposit = 'DEPOSIT',\n  Withdraw = 'WITHDRAW',\n  Declined = 'DECLINED',\n}\n\nexport function getTagColor(operation: string) {\n  switch (operation) {\n    case Operations.Deposit:\n      return 'green';\n    case Operations.Withdraw:\n      return 'orange';\n    case Operations.Declined:\n      return 'red';\n  }\n}\n","import React, { useState } from 'react';\nimport { Statistic, Typography, Input, Button, List, Tag, DatePicker } from 'antd';\nimport { ApiService } from '../services/DataApi';\nimport { getTagColor } from '../utils';\nimport NumberFormat from 'react-number-format';\nimport moment from 'moment';\nimport { useAsyncEffect } from 'use-async-effect';\n\nconst { Title, Text } = Typography;\n\nexport const Dashboard: React.FC<{ accountId: string }> = ({ accountId }) => {\n  const [value, setValue] = useState<number>(0);\n  const [balance, setBalance] = useState<number>(0);\n  const [message, setMessage] = useState('');\n  const [history, setHistory] = useState<any[]>([]);\n\n  useAsyncEffect(async () => {\n    const {\n      data: { balance, message },\n    } = await ApiService.getBalance(accountId);\n    const {\n      data: { history },\n    } = await ApiService.getHistory(accountId);\n    setBalance(balance);\n    setMessage(message || '');\n    setHistory(history || []);\n  }, [message, balance, history]);\n\n  async function handleClick() {\n    const { account } = await ApiService.executeTransaction(accountId, value);\n    setBalance(account.balance);\n    setHistory(account.history);\n  }\n\n  return (\n    <div\n      style={{\n        display: 'grid',\n        height: '100%',\n        gridTemplateColumns: '1fr 4fr 1fr',\n      }}>\n      <div\n        style={{\n          height: '100%',\n          width: 250,\n          borderRight: '1px solid #d9d9d9',\n          padding: 24,\n        }}>\n        <div>\n          <Title level={4}>\n            Account ID\n            <div>\n              <Text code>{accountId}</Text>\n            </div>\n          </Title>\n        </div>\n        {!message && (\n          <Statistic\n            title=\"Balance\"\n            prefix=\"R$\"\n            value={\n              balance\n                ? balance.toLocaleString('pt-BR', {\n                    style: 'decimal',\n                    minimumFractionDigits: 2,\n                  })\n                : 0\n            }\n          />\n        )}\n      </div>\n      <div\n        style={{\n          padding: 24,\n        }}>\n        {message && <Title level={3}>{message}</Title>}\n        {history.length > 0 && (\n          <div>\n            <Title level={2}>History</Title>\n            <List\n              style={{\n                width: 500,\n              }}\n              size=\"large\"\n              bordered\n              dataSource={history}\n              renderItem={item => (\n                <List.Item style={{ display: 'grid', gridTemplateColumns: '1fr 2fr 1fr' }}>\n                  <Tag color={getTagColor(item.operation)}>{item.operation}</Tag>\n                  <span\n                    style={{\n                      margin: '0px 16px',\n                    }}>\n                    R${' '}\n                    {\n                      <NumberFormat\n                        value={item.value}\n                        displayType=\"text\"\n                        thousandSeparator=\".\"\n                        decimalSeparator=\",\"\n                        decimalScale={2}\n                        fixedDecimalScale={true}\n                        allowNegative={true}\n                      />\n                    }\n                  </span>\n                  <DatePicker\n                    showTime\n                    format=\"DD/MM/YY HH:mm:ss\"\n                    defaultValue={moment(item.date)}\n                    disabled\n                  />\n                </List.Item>\n              )}\n            />\n          </div>\n        )}\n      </div>\n      <div\n        style={{\n          height: '100%',\n          borderLeft: '1px solid #d9d9d9',\n          padding: 24,\n        }}>\n        <Title level={4}>New transaction</Title>\n        <div>\n          Value:\n          <NumberFormat\n            value={value}\n            thousandSeparator=\".\"\n            decimalSeparator=\",\"\n            decimalScale={2}\n            allowNegative={true}\n            customInput={Input}\n            onValueChange={newVal => {\n              setValue(parseFloat(newVal.value));\n            }}\n          />\n          <div\n            style={{\n              paddingTop: 16,\n            }}>\n            <Button type=\"primary\" onClick={handleClick}>\n              Execute\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, ChangeEvent } from 'react';\nimport { Modal, Input, Icon } from 'antd';\nimport { Dashboard } from './components/dashboard';\n\nimport './App.css';\nimport 'antd/dist/antd.css';\n\nconst App: React.FC = () => {\n  const [accountId, setAccountId] = useState<null | string>(null);\n  const [inputVal, setInputVal] = useState('');\n\n  function handleChange(event: ChangeEvent<HTMLInputElement>): void {\n    const {\n      target: { value },\n    } = event;\n    if (/[^\\d]/.test(value)) return;\n    setInputVal(value);\n  }\n\n  function handleOk() {\n    setAccountId(inputVal);\n  }\n\n  return (\n    <div\n      style={{\n        height: '100vh',\n      }}>\n      {accountId && <Dashboard accountId={accountId} />}\n      <Modal title=\"Enter an account ID\" visible={!accountId} onOk={handleOk} onCancel={() => {}}>\n        <Input\n          prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n          placeholder=\"Account Id\"\n          value={inputVal}\n          onChange={handleChange}\n        />\n      </Modal>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}